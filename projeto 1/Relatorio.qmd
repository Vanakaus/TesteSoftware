---
title: "Relatório Trabalho Prático de Teste Baseado em Especificação"
subtitle: "Método para adição de números inteiros muito, muito grandes"
author: "Vinicius Simões Vieira"
toc: true
toc-title: Sumário
number-sections: false
highlight-style: pygments
format: 
  html:
    embed-resources: true

engine: knitr
---

```{css}
#| echo: false
ul,
p {
  text-align: justify !important
}
```


## Introdução

Este relatório descreve o processo da criação de testes automatizados para um método específico que realiza a soma de dois números grandes manipulando cada número com um array, separando cada algarismo do número em posições no array. E como retorno deste método, será mais um array contendo os algarismos do resultado da soma.

A seguir temos o processo de cada um dos passos realizados neste trabalho.



## Passo 2 - Explorar o funcionamento do programa

Neste passo vamos verificar o funcionamento do método, anotando as entradas e saidas esperadas:

- O método deve receber dois arrays de inteiros formando dois números e retorar um array de inteiro formando o resultado deles:
  - <(``left``="[1, 2, 3]", ``rigth``="[3, 2, 1]"), ("[4, 4, 4]")>
- Caso os parâmetros de entrada (``left`` ou ``rigth``) contenham algum inteiro que nao esteja entre 0 e 9, o método deve retornar um ``IllegalArgumentException``:
  - <(``left``="[1, 2, 3]", ``rigth``="[3, 2, 1]"), ("``IllegalArgumentException``")>
- Caso os parâmetros de entrada (``left`` ou ``rigth``) sejam uma lista vazia, o método também deve retornar uma lista vazia:
  - <(``left``="[]", ``rigth``="[3, 2, 1]"), ("[]")>
- Caso os parâmetros de entrada (``left`` ou ``rigth``) sejam ``null``, o método também deve retornar ``null``:
  - <(``left``="``null``", ``rigth``="[3, 2, 1]"), ("``null``")>



## Passo 3 - Identificar as partições

### Para cada entrada individualmente

#### Parâmetro ``left`` e ``rigth``: 
  
Os parãmetros ``left`` e ``rigth`` possuem a mesma estrutura e são esperadas os mesmos tipos de dados(número inteiro, separando os algarismos dentro de um array), então irá ser discutido e explanada está análise apenas uma vez, mas nos proximos passos, ao realizar a combinação das entradas estes valores serão duplicados para realizar o calculo de possibilidades de testes distintos.

Sendo assim, estes parâmetros deven ser uma lista de inteiros(``List<Integer>``), que podem possuir valor nulo, uma lista vazia(``len(left)==0``), uma lista com apenas um algarismo(``len(left)==1``), uma lista com n algarismos(``len(left)>1``), sendo n maior que 1, e para os casos que possuem algarismos podemos ter numeros inteiros válidos([0, 9]) e inválidos([-∞, -1],[9, +∞]). Com isto temos a seguinte lista:
- ``left`` === ``null``;
- ``left`` === [](vazio);
- ``len(left)==1``;
  - ``left[0]`` == [0, 9];
  - ``left[0]`` != [0, 9];
- ``len(left)>1`` (qualquer numero com, pelomenos, dois algarismos).
  - ``left[[0, --n]]`` == [0, 9];
  - ``left[[0, --n]]`` != [0, 9];



### Para combinações de entradas

Com isto vemos que os parametros possuem uma relação de depêndencia, já que ambos precisam ser válidos para que haja um resultado válido, portanto eles serão combinados entre si, para verificar cada caso possível das entradas. Isto siginifica que podemos possuir até 36 casos possíveis noeste momento, sendo left qualquer um dos seis casos, para cada um dos 6 casos de rigth, ``6 x 6 = 36``, felizmente estes casos serão derivados em uma menor quantidade de casos, mais a frente no relatório. Porém antes iremos coletar mais informações e possibilidades para o método, explorando as saidas esperadas e os valores limites nos próximos passos.



### Para saídas esperadas

Por fim vamos analisar as possíveis saídas do método, as quais, indiretamente, já foram discutidas no passo 2, sendo elas um retorno ``null``, um ``IllegalArgumentException`` ou um array de inteiros com algarismos válidos([0, 9]). Com isto temos a seguinte lista:

- ``null``;
- ``IllegalArgumentException``;
- array de inteiros:
  - array com um algarismo;
  - array com n algarismos, sendo n maior que 1.
- Cada algarismo do array deve ser um inteiro entre 0 e 9.


## Passo 4 - Identificar os valores limite

Neste passo, vamos identificar os valores limite, entre os conjuntos de entradas e saídas esperados, para que possamos criar casos de teste que explorem esses limites, afim de verificar se a divisão entre as partições está correta e se nao há algum equivo nos valores limites. Neste exercício, ja vimos alguns valores limites, como a entrada ``null`` e uma lista vazia, porém como eles são valores únicos e visados, eles já estão cobertos pelas partições, então não precisamos nos preocupar com eles. Entretanto possuimos outros valores limites ao se tratar dos algarismos dos números, que são os valores que devem estar dentro do intervalo válido([0, 9]), por termos um intervalo fechado, temos que os valores limites são -1 e 0 para o limite inferior e 9 e 10 para o limite superior. Por fim teremos os seguintes vlaores limites:

- Para cada parâmetro de entrada(``left``, ``rigth``):
  - ``null``*;
  - ``[]``*;
  - ``left[n]`` == -1;
  - ``left[n]`` == 0;
  - ``left[n]`` == 9;
  - ``left[n]`` == 10;
  
Obs: * já estão cobertos pelas partições.

Lembrando que são dois parâmetros de entrada com padrões iguais, então os valores limites são os mesmos para ambos, multiplicando os casos de teste, considerando o cenário de de combinações de entrada, temos mais 16 casos de teste, que serão derivados no próximo passo.



## Passo 5 -  Derivar os casos de teste

Até o determinado momento, temos 36 casos de teste possíveis, mais as 16 combinações de valores limites. Porém, vamos realizar aderivação dos mesmo, revisando casos e combinações em que os testes estão repetidos, ou testes que se fazem desnecessários pois outros testes impossibilitam que eles ocorram. No caso deste método, as entradas são identicas em seus formatos e valores esperados, então podemos trocar a combinação das entradas, por verificações separadas para cada uma das entradas, logo, ao inves de termos ``6x6`` casos de teste, teremos ``6+6`` casos de teste, o que nos dá 12 casos de teste vindos das partições. Mas temos também os valores limites, que por sua vez, nos permite combinar com as partições nao ``nulas`` e não vazias:

- ``len(left)==1``;
- ``len(left)>1``;


Com isto combinaremos os valores limites(4), com cada parametro de entrada(2), e com cada partição(2). Com isto, temos  4 valores limites, 2 parâmetros e 2 partições para cada parâmetro, o que nos dá ``4x2x2=16`` casos de teste. E dentro destes casos de teste com valores limites, temos testes repetidos sobre valores válidos nas partições padrões, então vamos remover os testes inicias e utilizar os testes com valores limites, removendo assim 8 testes inicias, diminuindo 12 para 4. Com isto temos um total de 20 casos de teste, sendo eles:

- Testes de entrada ``null``:
  - T01: ``left==null``;
  - T02: ``rigth==null``;
- Testes de entrada vazia:
  - T03: ``left==[]``;
  - T04: ``rigth==[]``;
- Testes de array unitário com valores limites:
  - T05: ``left==[-1]``;
  - T06: ``left==[0]``;
  - T07: ``left==[9]``;
  - T08: ``left==[10]``;
  - T09: ``rigth==[-1]``;
  - T10: ``rigth==[0]``;
  - T11: ``rigth==[9]``;
  - T12: ``rigth==[10]``;
- Testes de array com mais de um algarismo com valores limites:
  - T13: ``left==[-1, 0, 1, 2, 3]``;
  - T14: ``left==[0, 1, 2, 3, 4]``;
  - T15: ``left==[5, 6, 7, 8, 9]``;
  - T16: ``left==[6, 7, 8, 9, 10]``;
  - T17: ``rigth==[-1, 0, 1, 2, 3]``;
  - T18: ``rigth==[0, 1, 2, 3, 4]``;
  - T19: ``rigth==[5, 6, 7, 8, 9]``;
  - T20: ``rigth==[6, 7, 8, 9, 10]``;



## Passo 6 - Automatizar os casos de teste usando JUnit

Ao automatizar os testes, separa os mesmo em partições do mesmo tipo, dentro de funções teste, por exemplo, todos os testes com array de entrada com valor unitário, foram colocados dentro de uma unica função de teste, e assim por diante. Neste case não houve grandes complicações, mas apenas uma pesquisa para entender o funcionamento do Junit em casos de ``trow new Exception()``, que neste caso foi a exceção ``IllegalArgumentException``.

O problema encontrado foi a tentative reutilizar as entradas em testes diferentes, porém o método testado inverte os arrays, infelizmente invertendo o array original, e não somente a copia enviada para o método. Com isto, foi necessário criar novos arrays com dados brutos, um para cada teste, o que não é um problema, mas poderia ser mais prático se fosse possível reutilizar os valores de entrada.



## Passo 7 - Aumentar a suíte de testes por meio de experiência e criatividade

Por fim, foi lembrado que operações de soma de números inteiros, podem conter números que ao serem somados podem ultrapasar a dezena, somando ``1`` ao proximo algarismo, e para este caso podemos ter mais duas situações, quando o há um próximo algarismo para somar e quando não há, criando um algorismo novo. Com isto, foram criados mais 2, sendo eles:

- Testes de soma com unidades grandes:
  - T21: ``left==[1,6], rigth==[1,6]``;
  - T22: ``left==[9, 9], rigth==[9, 9]``;
  
Alem deste também possuímos os casos em que os números possuem tamanhos diferentes, e que um deles é maior que o outro, e para este caso, foi criado mais 2 testes:

- Testes de soma com tamanhos diferentes:
  - T23: ``left==[1, 2, 3, 4], rigth==[1, 2, 3]``;
  - T24: ``left==[1, 2, 3], rigth==[1, 2, 3, 4]``;
