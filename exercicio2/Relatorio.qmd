---
title: "Relatório Trabalho Prático de Teste Baseado em Especificação"
subtitle: "Método para adição de números inteiros muito, muito grandes"
author: "Aluno Teste de Software"
toc: true
toc-title: Sumário
number-sections: false
highlight-style: pygments
format: 
  html:
    embed-resources: true

engine: knitr
---

```{css}
#| echo: false
ul,
p {
  text-align: justify !important
}
```


## Introdução

Este documento descreve o processo e o raciocínio usado para derivar casos de teste para o método ``validateIdentifier()`` da classe ``Identifier()``. Este processo foi baseado no exemplo do autor do livro texto da disciplina, Mauricio Aniche, ao derivar testes para o método ``substringsBetween()``, discutido em aula.


## Passo 2 - Explorar o funcionamento do programa {#sec-p2}

O processo realizado foi o seguinte:

- Entender o objetivo do método, entendendo suas entradas e saidas plaussiveis de erro, falha, e sucesso. Neste caso, o método recebe uma string ``s`` de entrada e retorna um boolean. E seu processamento segue em verificar se a string é valida, baseada na quantidade de caracteres, quais os caracteres, e o caractere inicial;
  - <(``s``="abcd"), (``true``)>
- Em seguida, vamos analizar quais são os parametros para retornar ``true`` e ``false``. Para retorno ``true``, deve-se iniciar com letra, não conter caracteres diferentes de letras ou números(caracteres especiais) e ter comprimento entre 1 a 6 caracteres;
  - <(``s``="a"), (``true``)>
  - <(``s``="a123"), (``true``)>
  - <(``s``="abcdef"), (``true``)>
- Por fim, foi repetido o passo anterior verificando o retorno ``false``. Para isto, entramos com uma string com menos de 1 caractere ou mais que 6 caracteres, uma string que não começa com uma letra, ou que contenha carateres diferentes de letras ou numeros(caracteres especiais);
  - <(``s``=""), (``false``)>
  - <(``s``="asdasdasd"), (``false``)>
  - <(``s``="1asd"), (``false``)>
  - <(``s``="a@"), (``false``)>

## Passo 3 - Identificar as partições

### Parâmetro ``s``: 
  
Como vemos no passo anterior, ``s`` pode ser qualquer string, mas ao verificarmos a especificação conseguimos separar em conjuntos que devem ser verificados. Alén destes conjuntos eu sempre adiciono casos de entrada ``null`` e string vazia, neste caso a string vazia entra no conjunto de strings com menos de um caravtere. Dito isto, vamos separar os conjuntos da seguinte maneira:

- ``s`` com valor ``null``;
- ``s`` vazia(``len(s)<1``);
- ``len(s)>6``;
- ``len(s)==1``, sendo:
  - ``s[0] === letra``;
  - ``s[0] === LETRA``;
  - ``s[0] !== letra`` e ``s[0] !== LETRA``;
- ``len(s)>1`` e ``len(s)<=6``, sendo:
  - ``s`` contém apenas letras;
  - ``s`` contém apenas números;
  - ``s`` contém letras e numeros;
  - ``s`` contém caracteres especiais.



### Combinações de Entradas

Por ter apenas um parâmetro de entrada, não há  combinações de entradas, mas dentro da mesmaentrada temos as 9 possibilidades listadas acima.


### Saídas Esperadas

Por fim, vamos analizar as saidas possíveis. Este método é do tipo boolean, então não há muitas possibilidades, apenas ``true`` e ``false``, e os motivos para cada possibilidade foram discutidos no [Passo @sec-p2].


## Passo 4 - Identificar os valores limite

Valores no limite dos consjuntos de entrada são comunmente confundidos no processamento do método, fazendo-se importante verifica-los em especial. Neste método, não há muitos valores limites, já que a diferença entre a maioria dos conjuntos são bem definidas. Os únicos conjuntos que há valores limites, são os conjuntos referentes ao comprimento da string, sendo o limite inferior, entrada com pelo menos um caractere, o qual já está listado para testar, pois entra em outro parametro de teste. E o outro valor limite é o limite superior, entrada com até 6 caracteres, para isto será adicionado mais dois testes que passam em todos as características, com 6 e com 7 caracteres:

- ``len(s)==6``, ``s``="abcdef";
- ``len(s)==7``, ``s``="abcdefg".


## Passo 5 -  Derivar os casos de teste

Como dito anteriormente, este método não possui muitas combinações, as quais, geralmente, onde podemos derivar bastante. Porém, podemos derivar os testes de apenas números, pois ao testar se a string começa com letra, impossibilita a possibilidade de termos uma string contendo apenas números. Além disso também podemos testar o limite superior junto ao teste com quantidade entre 1 a 6 caracteres, fazendo com que todos os testes deste conjunto sejam com comprimento de 6 caracteres.


## Passo 6 - Automatizar os casos de teste usando JUnit

::: {.callout-note}
Aqui você deve descrever as dificuldades ou limitações que teve ao implementar os casos de teste usando JUnit.
:::

A maior dificuldade encontrada está no quanto e aonde é possível derivar os testes, alem da organização ao juntar diferentes entradas dentro dos testes. 

## Passo 7 - Aumentar a suíte de testes por meio de experiência e criatividade

Este exemplo não há muita margem para testes muitos diferentes. Acredito que os testes mais diferentes possiveis são os testes com valor null e vazio, além do uso de caracteres especiais, principalmente caracteres em branco. Porém estes testes foram implementados nos passos anteriores.